package com.example.cv_tracker.service;import com.example.cv_tracker.models.LocationStats;import org.apache.commons.csv.CSVFormat;import org.apache.commons.csv.CSVRecord;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.stereotype.Service;import javax.annotation.PostConstruct;import java.io.IOException;import java.io.StringReader;import java.net.URI;import java.net.http.HttpClient;import java.net.http.HttpRequest;import java.net.http.HttpResponse;import java.util.ArrayList;import java.util.List;@Servicepublic class CoronaDataService {    private static String virus_data = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/archived_data/archived_daily_case_updates/02-12-2020_1020.csv";    List<LocationStats> allStats = new ArrayList<>();    public List<LocationStats> getAllStats(){        return allStats;    }    @PostConstruct    @Scheduled(cron = "* * * * * *")    public void fetchData() throws IOException, InterruptedException {        List<LocationStats> newStats = new ArrayList<>();        HttpClient client = HttpClient.newHttpClient();        HttpRequest request = HttpRequest.newBuilder().uri(URI.create(virus_data)).build();        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());        StringReader reader = new StringReader(response.body());        Iterable<CSVRecord> records = CSVFormat.DEFAULT.withFirstRecordAsHeader().parse(reader);        for(CSVRecord record : records){            LocationStats locationStats = new LocationStats();            locationStats.setState(record.get("Province/State"));            locationStats.setCountry(record.get("Country/Region"));            int latest_cases = Integer.parseInt(record.get(record.size()-1));            int previous_day_cases = Integer.parseInt(record.get(record.size()-2));            locationStats.setLatest_total_cases(latest_cases);            locationStats.setDiff_from_prev_day(latest_cases - previous_day_cases);            //System.out.println(locationStats);            newStats.add(locationStats);        }        this.allStats = newStats;    }}